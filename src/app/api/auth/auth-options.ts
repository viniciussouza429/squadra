import { type NextAuthOptions } from "next-auth";
import GoogleProvider from "next-auth/providers/google";
import { PrismaAdapter } from "@auth/prisma-adapter";
import prisma from "@/lib/prisma";
import { type Session } from "next-auth";
import { type JWT } from "next-auth/jwt";

// Vari√°veis de ambiente
const GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID;
const GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET;
const NEXTAUTH_SECRET = process.env.NEXTAUTH_SECRET;

// üéØ Defini√ß√£o do Objeto de Configura√ß√£o
export const authOptions: NextAuthOptions = {
  adapter: PrismaAdapter(prisma),
  secret: NEXTAUTH_SECRET,
  providers: [
    GoogleProvider({
      clientId: GOOGLE_CLIENT_ID || "",
      clientSecret: GOOGLE_CLIENT_SECRET || "",
    }),
  ],

  // Estrat√©gia e P√°ginas
  session: {
    strategy: "jwt" as const,
  },
  pages: {
    signIn: "/login",
  },

  // üéØ Corre√ß√£o do erro 'any'
  callbacks: {
    async session({ session, token }: { session: Session; token: JWT }) {
      // Checa se o token existe e se o usu√°rio na sess√£o existe
      if (session.user && token.sub) {
        // üéØ SOLU√á√ÉO FINAL: For√ßa o TypeScript a reconhecer o ID
        // e atribui o token.sub (que √© o ID do usu√°rio no DB).

        // O tipo 'session.user' n√£o tem 'id' por padr√£o. Vamos adicionar:
        (session.user as { id: string }).id = token.sub;

        // OU, a forma mais simples (se a vers√£o do NextAuth permitir o cast impl√≠cito):
        // session.user.id = token.sub; // E a corre√ß√£o est√° no auth.d.ts
      }
      return session;
    },
  },
};
